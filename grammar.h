#include "grammatic_rule.h"

#define NON_TERMINAL_ENTRY(s) s*2 + 1
#define TERMINAL_ENTRY(s) s*2

Grammatic_rule grammar[] = {
	{VARS_LIST, IDENTIFIER, {NON_TERMINAL_ENTRY(VARS_LIST_C), -1}},
	{VARS_LIST_C, COMMA, {NON_TERMINAL_ENTRY(VARS_LIST), -1}},
	{VARS_LIST_C, -1, {}},
	{ASSIGNMENTS_LIST, IDENTIFIER, {
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(SEMICOLON),
					NON_TERMINAL_ENTRY(EXPRESSION),
					TERMINAL_ENTRY(ASSIGNMENT),
					-1
			       }},
	{ASSIGNMENTS_LIST, WRITE, {
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(SEMICOLON),
					TERMINAL_ENTRY(CLOSE_BRACKET),
					NON_TERMINAL_ENTRY(VARS_LIST),
					TERMINAL_ENTRY(OPEN_BRACKET),
					-1
				}},
	{ASSIGNMENTS_LIST, READ, {
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(SEMICOLON),
					TERMINAL_ENTRY(CLOSE_BRACKET),
					NON_TERMINAL_ENTRY(VARS_LIST),
					TERMINAL_ENTRY(OPEN_BRACKET),
					-1
				}},
	{ASSIGNMENTS_LIST, IF, {
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(SEMICOLON),
					TERMINAL_ENTRY(END_IF),
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(ELSE),
					NON_TERMINAL_ENTRY(ASSIGNMENTS_LIST),
					TERMINAL_ENTRY(THEN),
					NON_TERMINAL_ENTRY(EXPRESSION),
					-1
				}},
	{ASSIGNMENTS_LIST, -1, {}},
	{EXPRESSION, IDENTIFIER, {
					NON_TERMINAL_ENTRY(EXPRESSION_C),
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{EXPRESSION, NOT, {
					NON_TERMINAL_ENTRY(EXPRESSION_C),
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					NON_TERMINAL_ENTRY(TERM),
					-1
				}},
	{EXPRESSION, ZERO_CONSTANT, {
					NON_TERMINAL_ENTRY(EXPRESSION_C),
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{EXPRESSION, ONE_CONSTANT, {
					NON_TERMINAL_ENTRY(EXPRESSION_C),
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{EXPRESSION, OPEN_BRACKET, {
					NON_TERMINAL_ENTRY(EXPRESSION_C),
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					TERMINAL_ENTRY(CLOSE_BRACKET),
					NON_TERMINAL_ENTRY(EXPRESSION),
					-1
				}},
	{EXPRESSION_C, EQU, {NON_TERMINAL_ENTRY(EXPRESSION), -1}},
	{EXPRESSION_C, -1, {}},
	{DISJUNCTION, IDENTIFIER, {
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{DISJUNCTION, ONE_CONSTANT, {
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{DISJUNCTION, ZERO_CONSTANT, {
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					-1
				}},
	{DISJUNCTION, NOT, {
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					NON_TERMINAL_ENTRY(TERM),
					-1
				}},
	{DISJUNCTION, OPEN_BRACKET, {
					NON_TERMINAL_ENTRY(DISJUNCTION_C),
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					TERMINAL_ENTRY(CLOSE_BRACKET),
					NON_TERMINAL_ENTRY(EXPRESSION),
					-1
				}},
	{DISJUNCTION_C, OR, {NON_TERMINAL_ENTRY(DISJUNCTION), -1}},
	{DISJUNCTION_C, -1, {}},
	{CONJUNCTION, IDENTIFIER, {NON_TERMINAL_ENTRY(CONJUNCTION_C), -1}},
	{CONJUNCTION, ZERO_CONSTANT, {NON_TERMINAL_ENTRY(CONJUNCTION_C), -1}},
	{CONJUNCTION, ONE_CONSTANT, {NON_TERMINAL_ENTRY(CONJUNCTION_C), -1}},
	{CONJUNCTION, NOT, {
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					NON_TERMINAL_ENTRY(TERM),
					-1
				}},
	{CONJUNCTION, OPEN_BRACKET, {
					NON_TERMINAL_ENTRY(CONJUNCTION_C),
					TERMINAL_ENTRY(CLOSE_BRACKET),
					NON_TERMINAL_ENTRY(EXPRESSION),
					-1
				}},
	{CONJUNCTION_C, AND, {NON_TERMINAL_ENTRY(CONJUNCTION), -1}},
	{CONJUNCTION_C, -1, {}},
	{TERM, IDENTIFIER, {-1}},
	{TERM, ZERO_CONSTANT, {-1}},
	{TERM, ONE_CONSTANT, {-1}},
	{TERM, NOT, {NON_TERMINAL_ENTRY(TERM), -1}},
	{TERM, OPEN_BRACKET, {TERMINAL_ENTRY(CLOSE_BRACKET), NON_TERMINAL_ENTRY(EXPRESSION), -1}}
};
